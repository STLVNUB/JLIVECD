#!/bin/bash
project='JLIVECD'
description='Live CD/DVD customization tool'
version='2.3.0'
bugurl='https://github.com/neurobin/JLIVECD/issues'
author='Md. Jahidul Hamid <jahidulhamid@yahoo.com>'
source='https://github.com/neurobin/JLIVECD'
versioninfo="Name         : $project
Description  : $description
Version      : $version
Author       : $author
Source       : $source
Bug report   : $bugurl"
help="
Run 'JLstart' to start the tool and follow the instructions printed on terminal.
To set/unset options, do optional tweaking and view info about this tool, run 'JLopt'.
JLopt [options]

-v   : show version info
-t1  : set primary default terminal
-t2  : set secondary default terminal
-rt1 : factory reset primary terminal
-rt2 : factory reset secondary terminal
-rt  : factory reset all terminals
-ra  : factory reset all.
-rn  : refresh network. Runs JLRefreshNetwork
-t   : set timeout
-h   : show help menu.
"

export JLdir=/usr/local/JLIVECD
cd $JLdir
. ./defconf.sh
. ./funcs.sh

logdir="/usr/local/JLIVECD"
configfile="$logdir/.config"

opts=( "$@" )
[[ ${opts[@]} == "" ]] && echo "$help" && exit 0;
#if no argument is passed this for loop will be skipped
skip=false
for ((i=0;i<$#;i++)) do
if $skip;then skip=false;continue;fi
case "${opts[$i]}" in
   -v|--version)
       	echo "$versioninfo"
    	exit 0;
    	;;
   -rn|--refresh-network)
       	sudo -k /usr/local/JLIVECD/main/JLRefreshNetwork
       	continue
       	;;
       -ra|--reset-all)
       	mkdir -p "$logdir"
       	echo "" > "$configfile"
       	continue
       	;;
   -t|--timeout)
       	timeout="${opts[$((i+1))]}"
       	[[ $timeout =~ ^[0-9]+$ ]] || { echo "Bad value for timeout: '$timeout'";exit 1; }
       	timeout=$(echo $timeout |sed "s/^0*\([1-9]\)/\1/;s/^0*$/0/")
       	update_prop_val "$JL_tmn" "$timeout" "$configfile" "Timeout value"
       	skip=true;
       	continue
       	;;
   -t1|--terminal1)
       	terminal1="${opts[$((i+1))]}"
       	command -v "$terminal1" >/dev/null 2>&1 || { echo "Invalid terminal command: '$terminal1'" ; exit 1; }
       	update_prop_val "$JL_t1n" "$terminal" "$configfile" "Primary terminal"
       	skip=true;
       	continue
       	;;
   -t2|--terminal2)
       	terminal2="${opts[$((i+1))]}"
       	command -v "$terminal2" >/dev/null 2>&1 || { echo "Invalid terminal command: '$terminal2'" ; exit 1; }
       	update_prop_val "$JL_t2n" "$terminal2" "$configfile" "Secondary terminal"
       	skip=true;
       	continue
   	    ;;
    -rt1|--reset-terminal1)
        echo "$(grep -iv "^[[:blank:]]*$JL_t1n=")" > "$configfile"
    	continue
    	;;
    -rt2|--reset-terminal2)
        echo "$(grep -iv "^[[:blank:]]*$JL_t2n=")" > "$configfile"
    	continue
    	;;
    -rt|--reset-terminal)
        echo "$(grep -iv "^[[:blank:]]*$JL_t1n=")" > "$configfile"
        echo "$(grep -iv "^[[:blank:]]*$JL_t2n=")" > "$configfile"
    	continue
    	;;
    -h|--help)
        echo "$help"
        exit 0;
        ;;
    *)
        echo "$help"
        echo "invalid option: '${opts[$i]}'"
        exit 1;
        ;;
esac
done

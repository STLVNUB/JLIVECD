#!/bin/bash
BASEDIR="$(dirname "$BASH_SOURCE")"
cd "$BASEDIR"
logdir="$HOME/.neurobin/JLIVECD"
configfile="$logdir/.config"
JL_terminal1="$(grep -soP '(?<=^terminal1=).*' "$configfile")"
JL_terminal2="$(grep -soP '(?<=^terminal2=).*' "$configfile")"
command -v "$JL_terminal1" >/dev/null 2>&1 || JL_terminal1='x-terminal-emulator'
command -v "$JL_terminal2" >/dev/null 2>&1 || JL_terminal2='xterm'
if [ -f "/tmp/JLlock" ]; then
  echo -e "\nSorry... another instance of this section is running\n or premature shutdown detected from a previous run....\n.......You need to finish that first or force your way through....."
  read -t 10 -p "Force start..(y/n)?: " force
  if [ "$force" != "y" ] && [ "$force" != "Y" ]; then
    echo -e "\n.....Exiting...."
    exit 1
  fi
fi
echo "1" > /tmp/JLlock
maindir="$PWD"
yn="n"
livedir=""
timeout="$(grep -soP '(?<=^timeout=).*' "$configfile")"
if [[ $timeout =~ ^[0-9]+$ ]]; then
  timeout=$(echo $timeout |sed "s/^0*\([1-9]\)/\1/;s/^0*$/0/")
else
  timeout=10
fi
if [ -f "$HOME/JLIVEdir" ]; then
  echo "$(cat $HOME/JLIVEdir)" > dirn
  rm -f "$HOME"/JLIVEdir
fi
if [ -f "$HOME/JLIVEyn" ]; then
  echo "$(cat $HOME/JLIVEyn)" > yn
  rm -f "$HOME"/JLIVEyn
fi
if [ -f "dirn" ]; then
  livedir="$(cat dirn)"
fi
if [ -f "yn" ]; then
  yn="$(cat yn)"
fi
rm -f yn
c=1
if [ "$yn" == "y" ]; then
  c=2
  cd "$livedir"
  isopath="$(cat $HOME/JLIVEisopath)"
  if [ -d edit ]; then
    echo -e "\n***Seems this isn't really a new project (edit directory exists)***,\n***existing files will be overwritten!!!***\n if you aren't sure what this warning is about, close this terminal and run again.If this is shown again, enter y and continue..."
    read -p ".......Are you sure, you want to continue (y/n)?: " cont
    if [  "$cont" == "y" ] || [ "$cont" == "Y" ]; then
      echo -e "\n.....OK....."
    else
      echo -e "\n......Exiting......"
      exit 0
    fi
  fi
  mount -o loop "$isopath" mnt || { echo "------Failed to mount iso.";exit 1; }
  rsync --exclude=/casper/filesystem.squashfs -a mnt/ extracted || { echo "------rsync failed";exit 1; }
  unsquashfs mnt/casper/filesystem.squashfs || { echo "------unsquashfs failed";exit 1; }
  mv squashfs-root edit || { echo "------Couldn't move squashfs-root.";exit 1; }
  umount mnt
fi
cd "$maindir"
while [ $c == 1 ]
do
  if [ "$yn" != "y" ]; then
    echo -e "\n......If you just hit enter it will take your previous choice (if any)..."
    read -e -p "......Enter the directory path where you have saved your project: " livedir
    livedir="${livedir/\~/$HOME}"
    if [ "$livedir" == "" ]; then
      if [ -f "dirn" ]; then
        livedir="$(cat dirn)"
        echo -e "\n......Entering into directory: $livedir"
      fi
    elif [ -d "$livedir" ]; then
      rm -f dirn
      echo "$livedir" > dirn
    fi
  fi
  if [ "$livedir" != "" ]; then
    c=2
  else 
    c=1
    echo -e "\n......Invalid directory!"
  fi
  if [ -d "$livedir" ]; then
    c=2
    else
    c=1
    echo -e "\n......Directory doesn't exist!"
  fi
done
liveconfigfile="$livedir/.config"
touch "$liveconfigfile"
chmod 777 "$liveconfigfile"
echo -e "\n......If you just hit enter it will take your previous choice (if any)"
read -e -p "......Enter your desired (customized) cd/dvd name: " cdname
iso="$(tail -c 5 <<< "$isofullpath")"
iso="${iso,,}"
if [ "$iso" == ".iso" ]; then
  cdname="${cdname:0:${#cdname}-4}"
fi
if [ "$cdname" == "" ]; then
  if [ -f "$liveconfigfile" ]; then
    cdname="$(grep -soP '(?<=^DiskName=).*' "$liveconfigfile")"
    [[ $cdname == "" ]] && { 
    cdname="New-Disk";echo -e "\n******Using 'New-Disk' as cd/dvd name"; 
    } ||
    echo -e "\n......Using previously used name: $cdname"
  else
    cdname="New-Disk"
    echo -e "\n******Using 'New-Disk' as cd/dvd name"
  fi
fi
if grep -sq '^DiskName=' $liveconfigfile;then
   sed -r -i.bak "s/(^DiskName=).*/\1$cdname/" $liveconfigfile
else
    echo "DiskName=$cdname" >> $liveconfigfile
fi
##############################Copy some required files#####################################################################
cp clean "$livedir"/edit/clean
cp preparechroot "$livedir"/edit/prepare
cp help "$livedir"/edit/help
cd "$livedir"
echo -e "\n......Entered into directory $livedir"
##################### managing initrd################
echo -e "\n......managing initrd......"
if [ -f "extracted/casper/initrd.lz" ]; then
  initrd="initrd.lz"
  echo -e "\n......Found: $initrd"
elif [ -f "extracted/casper/initrd.gz" ]; then
  initrd="initrd.gz"
  echo -e "\n......Found: extracted/casper/$initrd"
else
  echo -e "\n......couldn't find initrd type....."
  read -e -p "Enter the name of initrd archive: " initrd
fi
rm -f edit/initrd
echo "$initrd" > edit/initrd
##############################Enable network connection####################################################################
echo -e "\n......Preparing network connection for chroot....."
cp /run/resolvconf/resolv.conf edit/run/resolvconf/
cp /etc/hosts edit/etc/
echo -e "\n......Network connection will be available in chroot....."
##############################Debcache management########################################################################
echo -e "\n......Debcache Management starting....\n......moving deb files to edit/var/cache/apt/archives......"
cd "$livedir"
if [ -d "debcache" ]; then
  echo dummy123456 > debcache/dummy123456.deb
  mv -f debcache/*.deb edit/var/cache/apt/archives
  echo -e "\n.......deb files moved......\n.......Debcache Management complete!......."
fi
##############################Create chroot environment and prepare it for use#############################################
mount --bind /dev/ edit/dev
printf "\n......Detecting access control state......\n"
if xhost | grep 'access control enabled' >/dev/null; then
    bxhost='-'
    printf '\n......Access control is enabled\n'
else
    bxhost='+'
    printf '\n......Access control is disabled\n'
fi
dxhost="$(grep -soP '(?<=^xhost=).*' "$liveconfigfile")"
if [[ $bxhost = '+' ]]; then
    read -t $timeout -p "......Enable access control (prevent GUI apps to run) (Y/n)? (default '$dxhost'): " xh
else
    read -t $timeout -p "......Keep access control enabled (prevent GUI apps to run) (Y/n)? (default '$dxhost'): " xh
fi
[[ $xh == "" ]] && xh="$dxhost"
if grep -sq '^xhost=' $liveconfigfile;then
   sed -r -i.bak "s/(^xhost=).*/\1$xh/" $liveconfigfile
else
    echo "xhost=$xh" >> $liveconfigfile
fi
if [[ ! "$xh" = [Yy] ]]; then
    xhost +
else
    xhost -
fi

echo -e "\n......Running chroot terminal...\n......When you are finished, run: exit or simply close the chroot terminal.....\n\n...... run 'cat help' or './help' to get help in chroot terminal......\n"
$JL_terminal1 -e "bash -c 'chroot ./edit ./prepare;HOME=/root LC_ALL=C chroot ./edit;exec bash'" || {
echo "------Couldn't run $JL_terminal1, trying $JL_terminal2...."
$JL_terminal2 -e "bash -c 'chroot ./edit ./prepare;HOME=/root LC_ALL=C chroot ./edit;exec bash'"
} || {
echo "------Failed to run $JL_terminal2. Probably not installed!!"
read -e -p "Want to continue without chroot (Y/n)?: " choice1
if [[ $choice1 =~ [Yy] ]];then
  echo "......Continuing without chroot. No modification will be done"
else
  echo "......Counldn't run the chroot terminal, exiting..."
  exit 2
fi
}
echo '......Restoring access control state'
xhost $bxhost #leave this variable unquoted
##################################Debcache management############################################################
echo -e "\n......Debcache Management starting......\n......Moving .deb files to debcache......"
cd "$livedir"
if [ ! -d "debcache" ]; then
  mkdir debcache
fi
echo dummy123456 > edit/var/cache/apt/archives/dummy123456.deb
mv -f edit/var/cache/apt/archives/*.deb debcache
echo -e "\n......deb files moved......\nDebcache Management complete!......"
##################################Cleaning...#########################################
/usr/local/JLIVECD/main/clean
rm -f /tmp/JLlock
if [ -f "edit/$initrd" ]; then
  mv edit/"$initrd" extracted/casper/
else
  echo -e "\n......Assuming: you haven't modified the kernel modules or init scripts...."
fi
###############################Post Cleaning#####################################################################
echo -e "\n.....Cleaning system...."
rm -f edit/initrd
rm -f edit/prepare
rm -f edit/clean
rm -f edit/help
echo -e "\n......System Cleaned!....."
##############################Checking for new installed kernel############################################################
kerver=0
if [ -f "extracted/casper/vmlinuz" ]; then
  vmlinuz="extracted/casper/vmlinuz"
  echo -e "\n......vmlinuz found: $vmlinuz"
elif [ -f "extracted/casper/vmlinuz.efi" ]; then
  vmlinuz="extracted/casper/vmlinuz.efi"
  echo -e "\n......vmlinuz found: $vmlinuz"
else
  echo -e "\n......Couldn't find vmlinuz!"
  read -e -p "......Enter the name for vmlinuz: " vmlinuz
  vmlinuz="extracted/casper/$vmlinuz"
fi
d=1
ker=""
echo -e "\n\n"
read -t $timeout -p "......have you installed new kernel and want to boot the new kernel in live cd/dvd: (y/n)?: " ker
if [ "$ker" != "y" ]; then
  if [ "$ker" != "Y" ]; then
    d=2
  fi
fi
while [ $d == 1 ]
do
  read -e -p "......Enter the kernel version (take your time on this one): " kerver
  vmlinuz_path=edit/boot/vmlinuz-"$kerver"
  initrd_path=edit/boot/initrd.img-"$kerver"
  if [ -f "$vmlinuz_path" ]; then
    if [ -f "$initrd_path" ]; then
      cp edit/boot/vmlinuz-"$kerver" "$vmlinuz"
      cp edit/boot/initrd.img-"$kerver" extracted/casper/"$initrd"
      echo -e "\n......Rebuilding initrd...running....."
      mount --bind /dev/ edit/dev
      chroot edit mount -t proc none /proc
      chroot edit mount -t sysfs none /sys
      chroot edit mount -t devpts none /dev/pts
      chroot edit mkinitramfs -o /"$initrd" "$kerver"
      echo -e "\n......initrd rebuilt successfully!......"
      chroot edit umount /proc || chroot edit umount -lf /proc 
      chroot edit umount /sys
      chroot edit umount /dev/pts
      umount edit/dev || umount -lf edit/dev
      mv edit/"$initrd" extracted/casper/
      echo -e "\n......kernel updated successfully!"
      d=2
    else
      echo -e "......Couldn't find the specified kernel!\nEnter n to skip or enter the right version..."
    fi
  else
    echo -e "......Couldn't find the specified kernel!\nEnter n to skip or enter the right version..."
  fi
  if [ "$kerver" == "n" ]; then
    d=2
  elif [ "$kerver" == "N" ]; then
    d=2
  fi
done
fastcomp="$(grep -soP '(?<=^FastCompression=).*' "$liveconfigfile")"
read -t $timeout -p "......Use fast compression (ISO size may become larger) (Y/n)? (default '$fastcomp'): " choice1
[[ $choice1 == "" ]] && choice1="$fastcomp"
if grep -sq '^FastCompression=' $liveconfigfile;then
   sed -r -i.bak "s/(^FastCompression=).*/\1$choice1/" $liveconfigfile
else
    echo "FastCompression=$choice1" >> $liveconfigfile
fi
#check for uefi
uefi="$(grep -soP '(?<=^UEFI=).*' "$liveconfigfile")"
read -t $timeout -p "......Want UEFI image (Y/n)? (default '$uefi'): " choice2
[[ $choice2 == "" ]] && choice2="$uefi"
if grep -sq '^UEFI=' $liveconfigfile;then
   sed -r -i.bak "s/(^UEFI=).*/\1$choice2/" $liveconfigfile
else
    echo "UEFI=$choice2" >> $liveconfigfile
fi
#check for hybrid
hybrid="$(grep -soP '(?<=^Hybrid=).*' "$liveconfigfile")"
read -t $timeout -p "......Want hybrid image (Y/n)? (default '$hybrid'): " choice3
[[ $choice3 == "" ]] && choice3="$hybrid"
if grep -sq '^Hybrid=' $liveconfigfile;then
   sed -r -i.bak "s/(^Hybrid=).*/\1$choice3/" $liveconfigfile
else
    echo "Hybrid=$choice3" >> $liveconfigfile
fi
echo -e "\n......Updating some required files..."
###############################Create CD/DVD##############################################################################
cd "$livedir"
chmod +w extracted/casper/filesystem.manifest
chroot edit dpkg-query -W --showformat='${Package} ${Version}\n' > extracted/casper/filesystem.manifest
cp extracted/casper/filesystem.manifest extracted/casper/filesystem.manifest-desktop
sed -i '/ubiquity/d' extracted/casper/filesystem.manifest-desktop
sed -i '/casper/d' extracted/casper/filesystem.manifest-desktop
rm -f extracted/casper/filesystem.squashfs
echo -e "\n......Deleted old filesystem.squashfs.."
echo -e "\n......Rebuilding filesystem.squashfs.."
if [[ $choice1 == [Yy] ]];then
  echo "......Using fast compression. Size may become larger...."
  mksquashfs edit extracted/casper/filesystem.squashfs -b 1048576
else
  echo "*****Using exhaustive compression. Size may become lesser*****"
  #mksquashfs edit extracted/casper/filesystem.squashfs -comp xz
  mksquashfs edit extracted/casper/filesystem.squashfs -comp xz -e edit/boot
fi
printf $(du -sx --block-size=1 edit | cut -f1) > extracted/casper/filesystem.size
cd extracted
echo -e "\n......Updating md5sums....."
if [ -f "MD5SUMS" ]; then
  rm MD5SUMS
  find -type f -print0 | xargs -0 md5sum | grep -v isolinux/boot.cat | tee MD5SUMS
fi
if [ -f "md5sum.txt" ]; then
  rm md5sum.txt
  find -type f -print0 | xargs -0 md5sum | grep -v isolinux/boot.cat | tee md5sum.txt
fi
echo -e "\n......Creating the image......"
if [[ $choice2 == [Yy] ]];then
    mkisofs -U -A "$IMAGE_NAME" -V "$IMAGE_NAME" -volset "$IMAGE_NAME" -J -joliet-long -r -v -T -o ../"$cdname".iso -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -e boot/grub/efi.img -no-emul-boot . && echo '......Prepared UEFI image'
    uefi_opt=--uefi
else
    mkisofs -D -r -V "$IMAGE_NAME" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o ../"$cdname".iso .
    uefi_opt=
fi
if [[ $choice3 == [Yy] ]]; then
    isohybrid $uefi_opt ../"$cdname".iso && echo "...... Converted to hybrid image"
fi
cd ..
echo -e "\n.....Finalizing image....."
chmod 777 "$cdname".iso
echo -e "\n......All done. Check the result........"
read -p ".......Press enter to exit........." enter
exit 0
